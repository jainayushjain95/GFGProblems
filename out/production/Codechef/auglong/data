package auglong;

import java.io.*;
import java.util.*;

public class SUBSFREQ {

	public static int mod = 1000000007;
	static Reader2 sc = new Reader2();
	
	public static void main(String[] args) throws IOException {
		int t = sc.nextInt();
		StringBuilder str = new StringBuilder();
		while(t != 0) {
			t--;
			str.append(solveOptimized());
			str.append("\n");
		}
		System.out.println(str.toString());
	}


	public static String solveOptimized() throws IOException {
		StringBuilder str = new StringBuilder();
		int N = sc.nextInt();
		int max = -1;
		int[] A = new int[N];
		for(int i = 0;i < N; i++) {
			A[i] = sc.nextInt();
			max = Math.max(A[i], max);
		}
		
		int[] frequencyArray = new int[max + 1];
		long[] solutionArray = new long[N + 1];
		List<Integer> list = new ArrayList<Integer>();
		
		setListAndArray(frequencyArray, list, A);
		sortList(frequencyArray, list);
		List<List<Long>> lists = preparePrefixSumCountList(list);
		
		for(int i = 0;i < list.size(); i++) {
			long solution = 0;
			int frequency = frequencyArray[list.get(i)];
			long totalCount = getExpo(2, frequency) - 1;
			while(totalCount > 0) {
				int setBitsCount = getNoOfSetBits(totalCount);
				long currSoution = 1;
				for(int j = 0;j < list.size(); j++) {
					if(j != i) {
						int maxSetBitsCount = -1;
						if(list.get(j) < list.get(i)) {
							maxSetBitsCount = setBitsCount - 1;
						} else {
							maxSetBitsCount = setBitsCount;
						}
						if(maxSetBitsCount >= 0) {
							long tempSolution = getCount(j, maxSetBitsCount, lists, frequencyArray[j]);
							currSoution *= tempSolution;
							if(currSoution >= mod) {
								currSoution = currSoution % mod;
							}	
						}
					}
				}
				solution += currSoution;
				if(solution >= mod) {
					solution = solution % mod;
				}
				totalCount--;
			}
			solutionArray[list.get(i)] = solution;
		}
		
		
		for(int i = 1;i < solutionArray.length; i++) {
			str.append(solutionArray[i]);
			str.append(" ");
		}
		
		return str.toString();
	}
	
	public static List<List<Long>> preparePrefixSumCountList(List<Integer> list) {
		List<List<Long>> lists = new ArrayList<List<Long>>();
		for(int i = 0;i < list.size(); i++) {
			int currentElement = list.get(i);
			long totalCount = getExpo(2, currentElement) - 1;
			int noOfBitsRequired = noOfBitsReqd(totalCount);
			long[] bitsFreq = new long[noOfBitsRequired + 1];
			
			while(totalCount > -1) {
				int setBitsCount = getNoOfSetBits(totalCount);
				bitsFreq[setBitsCount]++;
				totalCount--;
			}
			List<Long> l = new ArrayList<Long>();
			l.add(bitsFreq[0]);
			for(int m = 1; m < bitsFreq.length; m++) {
				l.add(m, l.get(m - 1) + bitsFreq[m]);
			}
			lists.add(l);
		}
		return lists;
	}
	
	public static int noOfBitsReqd(long n) {
		return 1 + (int)Math.floor(Math.log(n)/Math.log(2));
	}
	
	public static long getCount(int index, int maxSetBitsCount, List<List<Long>> lists, int freq) {
		long ans = 0;
		List<Long> list = lists.get(index);
		maxSetBitsCount = Math.min(maxSetBitsCount, list.size() - 1);
		ans = list.get(maxSetBitsCount);
//		long totalCount = getExpo(2, currentFrequency) - 1;
//		while(totalCount > -1) {
//			int setBitsCount = getNoOfSetBits(totalCount);
//			if(setBitsCount <= maxSetBitsCount) {
//				ans++;
//			}
//			totalCount--;
//		}
		return ans;
	}
	
	public static int getNoOfSetBits(long n) {
		int setBitsCount = 0;
		while(n != 0) {
			if(isLastBitSet(n)) {
				setBitsCount++;
			}
			n = n >> 1;
		}	
		return setBitsCount;
	}
	
	public static boolean isLastBitSet(long n) {
		return (n & 1) != 0; 
	}
	
	public static void sortList(int[] frequencyArray, List<Integer> list) {
		Collections.sort(list, (a, b) -> {
			if(frequencyArray[a] > frequencyArray[b]) {
				return -1;
			} else if(frequencyArray[a] < frequencyArray[b]) {
				return 1;
			} else if(a > b) {
				return 1;
			} else if(a < b) {
				return -1;
			}
			return 0;
		});
	}
	
	public static void setListAndArray(int[] frequencyArray, List<Integer> list, int[] A) {
		int N = A.length;
		for(int i = 0;i < N; i++) {
			if(frequencyArray[A[i]] == 0) {
				list.add(A[i]);
			} 
			frequencyArray[A[i]]++;
		}
	}

	public static long getExpo(long number, int exponent) {
		long expo = 1;
//		if(expoMap[exponent] != 0) {
//			expo = expoMap[exponent];
//		} else {
//			expo = fastExponentiation(number, exponent);
//			expoMap[exponent] = expo;
//		}
		expo = fastExponentiation(number, exponent);
		return expo;
	}
	
	public static long fastExponentiation(long number, long exponent) {
		if(number == 0) {
			return 0;
		}
		if(exponent == 0) {
			return 1;
		}
		if(exponent == 1) {
			return number;
		}
		if(exponent % 2 == 0) {
			long secondHalfResult = fastExponentiation(number, exponent/2);
			long ans = secondHalfResult * secondHalfResult;
			if(ans >= mod) {
				ans = ans % mod;
			}
			return ans;
		} else {
			long secondHalfResult = fastExponentiation(number, exponent/2);
			long ans = secondHalfResult * secondHalfResult;
			if(ans >= mod) {
				ans = ans % mod;
			}
			ans = ans * number;
			if(ans >= mod) {
				ans = ans % mod;
			}
			return ans;
		}
	}

}





class Reader2 { 
	final private int BUFFER_SIZE = 1 << 16; 
	private DataInputStream din; 
	private byte[] buffer; 
	private int bufferPointer, bytesRead; 

	public Reader2() 
	{ 
		din = new DataInputStream(System.in); 
		buffer = new byte[BUFFER_SIZE]; 
		bufferPointer = bytesRead = 0; 
	} 

	public Reader2(String file_name) throws IOException 
	{ 
		din = new DataInputStream(new FileInputStream(file_name)); 
		buffer = new byte[BUFFER_SIZE]; 
		bufferPointer = bytesRead = 0; 
	} 

	public String readLine() throws IOException 
	{ 
		byte[] buf = new byte[64]; // line length 
		int cnt = 0, c; 
		while ((c = read()) != -1) 
		{ 
			if (c == '\n') 
				break; 
			buf[cnt++] = (byte) c; 
		} 
		return new String(buf, 0, cnt); 
	} 

	public int nextInt() throws IOException 
	{ 
		int ret = 0; 
		byte c = read(); 
		while (c <= ' ') 
			c = read(); 
		boolean neg = (c == '-'); 
		if (neg) 
			c = read(); 
		do
		{ 
			ret = ret * 10 + c - '0'; 
		}  while ((c = read()) >= '0' && c <= '9'); 

		if (neg) 
			return -ret; 
		return ret; 
	} 

	public long nextLong() throws IOException 
	{ 
		long ret = 0; 
		byte c = read(); 
		while (c <= ' ') 
			c = read(); 
		boolean neg = (c == '-'); 
		if (neg) 
			c = read(); 
		do { 
			ret = ret * 10 + c - '0'; 
		} 
		while ((c = read()) >= '0' && c <= '9'); 
		if (neg) 
			return -ret; 
		return ret; 
	} 

	public double nextDouble() throws IOException 
	{ 
		double ret = 0, div = 1; 
		byte c = read(); 
		while (c <= ' ') 
			c = read(); 
		boolean neg = (c == '-'); 
		if (neg) 
			c = read(); 

		do { 
			ret = ret * 10 + c - '0'; 
		} 
		while ((c = read()) >= '0' && c <= '9'); 

		if (c == '.') 
		{ 
			while ((c = read()) >= '0' && c <= '9') 
			{ 
				ret += (c - '0') / (div *= 10); 
			} 
		} 

		if (neg) 
			return -ret; 
		return ret; 
	} 

	private void fillBuffer() throws IOException 
	{ 
		bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE); 
		if (bytesRead == -1) 
			buffer[0] = -1; 
	} 

	private byte read() throws IOException 
	{ 
		if (bufferPointer == bytesRead) 
			fillBuffer(); 
		return buffer[bufferPointer++]; 
	} 

	public void close() throws IOException 
	{ 
		if (din == null) 
			return; 
		din.close(); 
	} 
}